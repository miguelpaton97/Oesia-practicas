package com.oesia.formacion.practica.architecture.domain.managers.article;

import org.apache.log4j.Logger;

import com.oesia.formacion.practica.architecture.communications.messages.put.Put;
import com.oesia.formacion.practica.architecture.domain.managers.AbstractManager;
import com.oesia.formacion.practica.architecture.domain.model.Article;
import com.oesia.formacion.practica.architecture.domain.model.Article.Builder;
import com.oesia.formacion.practica.architecture.domain.model.Colour;
import com.oesia.formacion.practica.architecture.domain.model.Size;
import com.oesia.formacion.practica.architecture.persistence.entities.article.ArticleEntity;
import com.oesia.formacion.practica.architecture.persistence.entities.vendor.VendorData;
import com.oesia.formacion.practica.remote.RemoteSender;

public class ArticleManagerImpl extends AbstractManager<Article> implements ArticleManager {

	private final ArticleEntity articleEntity;
	
	private static final Logger LOGGER = Logger.getLogger(RemoteSender.class);

	public ArticleManagerImpl(ArticleEntity articleEntity) {
		super(articleEntity);
		this.articleEntity = articleEntity;
	}

	@Override
	public Size findSizeById(Integer sizeId) {
		return articleEntity.findSizeById(sizeId);
	}

	@Override
	public void update(Article article) {
		articleEntity.update(article);
	}

	@Override
	public void createArticleOrUpdateStock(Put put) throws Exception {
		Article article = createArticleByPut(put);
		if (Size.findById(put.getIdTalla()) == null || Colour.findById(put.getIdColor()) == null
				|| VendorData.findById(put.getIdVendor()) == null) {
			Exception e = new Exception();
			LOGGER.error(String.format("Se ha producido un error al procesar la operacion PUT de articulo con id: [%s]. Error => %s", put.getIdArticle(), e.getMessage()));
			throw e;
		}
		if (articleEntity.findById(put.getIdArticle()) != null) {
			articleEntity.update(article);
			LOGGER.debug(String.format("Articulo con id: %s, actualizado correctamente", put.getIdArticle()));
		} else {
			articleEntity.create(article);
			LOGGER.debug(String.format("Articulo con id: %s, creado correctamente", put.getIdArticle()));
		}
	}

	private Article createArticleByPut(Put put) {
		Article.Builder articleBuilder = new Builder();
		articleBuilder.articleId(put.getIdArticle());
		articleBuilder.colour(Colour.findById(put.getIdColor()));
		articleBuilder.description(put.getDescriptionArticle());
		articleBuilder.size(Size.findById(put.getIdTalla()));
		articleBuilder.numUnit(put.getNumUds());

		Article res = articleBuilder.build();
		return res;

	}
}